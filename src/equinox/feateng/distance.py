import networkx as nx
import numpy as np
from geopy.distance import great_circle

from equinox.feateng.laplace import enumerate_nodes


def haversine_distance_matrix(graph: nx.Graph) -> np.ndarray:
    """
    Calculates the Haversine distance matrix for a given route graph.

    The graph nodes are expected to have 'lat' and 'lon' attributes.
    The distance is +inf if there is no direct link between a pair of nodes,
    0 for the distance from a node to itself, and the Haversine distance
    in kilometers otherwise.

    The indices of the matrix correspond to the node mapping generated by
    the enumerate_nodes function from the laplace module.

    Args:
        graph (nx.Graph): The input route graph. Nodes must have 'lat'
                          and 'lon' attributes.

    Returns:
        np.ndarray: A square matrix where M[i, j] is the Haversine
                    distance between node_i and node_j, or np.inf
                    if not directly connected.
    """
    node_mapping = enumerate_nodes(graph)
    num_nodes = len(node_mapping)

    dist_matrix = np.full((num_nodes, num_nodes), np.inf)
    np.fill_diagonal(dist_matrix, 0)

    for u, v in graph.edges():
        try:
            u_attrs = graph.nodes[u]
            v_attrs = graph.nodes[v]

            u_coords = (u_attrs['lat'], u_attrs['lon'])
            v_coords = (v_attrs['lat'], v_attrs['lon'])
        except KeyError as e:
            raise ValueError(
                f"Node {e} is missing 'lat' or 'lon' attribute. "
                f"Node attributes: u_attrs={u_attrs if 'u_attrs' in locals() else 'N/A'}, "
                f"v_attrs={v_attrs if 'v_attrs' in locals() else 'N/A'}"
            ) from e


        distance_km = great_circle(u_coords, v_coords).km

        u_idx = node_mapping[u]
        v_idx = node_mapping[v]

        dist_matrix[u_idx, v_idx] = distance_km
        dist_matrix[v_idx, u_idx] = distance_km  # Assuming undirected graph or symmetric distances

    return dist_matrix


if __name__ == "__main__":
    graph_path = "data/graph/LEMD_EGLL_2023_04_01.gml"
    graph = nx.read_gml(graph_path)
    dist_matrix = haversine_distance_matrix(graph)
    print(dist_matrix[:30, :30])
    np.save(f"data/graph/{graph_path.split('/')[-1]}_distances.npy", dist_matrix)
    print(f"Saved distance matrix to {graph_path.split('/')[-1]}_distances.npy")
